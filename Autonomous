#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     lightSensor,    sensorHiTechnicIRSeeker1200)
#pragma config(Motor,  mtr_S1_C1_1,     motorA,        tmotorTetrix, PIDControl, reversed, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     motorB,        tmotorTetrix, PIDControl, encoder)
#pragma config(Servo,  srvo_S1_C2_1,    servo1,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//go to robot/Motor and Sensors Setup to set all of these, they are how you assign the motors and servos to be referenced in the code

#include "JoystickDriver.c"

void initializeRobot() //has to be here for some reason, just leave it
{
  return;
}

void Stop() //just a function to be called at other points, allows the robot to be stopped without having to type these two functions out
	{
		motor[motorA] = 0;
		motor[motorB] = 0;

	}

void goForward(int nTime) //a function that we defined so that we could call it at other points in the code, it makes the code much cleaner and allows you to do less work in the long run
	{
		motor[motorA] = 50; //just sets the motor to this power level
		motor[motorB] = 50;
		wait1Msec(nTime);
		Stop();

	}

void turnLeft(int nTime)//similar to goForward(), except it will cause the robot to turn left. the variable nTime will determine how long the robot turns for
	{
		motor[motorA] = 0;
		motor[motorB] = 50; //sets only one motor to move, this executes a swing turn
		wait1Msec(nTime); //waits for a certain amount of time
		Stop();
	}


task main() //this is the main function of the autonomous code, this is what will be run when the robot starts. it calls the predefined functions. all this code does is move the robot forward and then stop it
{
  waitForStart();
   servo[servo1] = 230; //we were having a problem with the arm hitting the ground, so this just raised our arm high so that it didnt run on the ground
   goForward(3500);


  /* while(true)
   {
      if(SensorValue[lightSensor] < 30)
      {
       turnLeft(1000);
       goForward(500);
       wait1Msec(1000);
       Stop(100);
      }
      else
      {
        goForward(600);
        Stop(100);
      }*/
}
