#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     motorA,        tmotorTetrix, PIDControl, reversed, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     motorB,        tmotorTetrix, PIDControl, encoder)
#pragma config(Servo,  srvo_S1_C2_1,    servo1,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
#include "JoystickDriver.c"

void initializeRobot() //necessary to be run for initialization in the competition
{
  return;
}

task main()
{
  initializeRobot(); //necessary to be run for initialization in the competition
	waitForStart(); //necessary for competition


	int threshold = 20; //threshold for the joystick, any joystick value lower than this should be assumed to be 0
	while(true)
	{
		getJoystickSettings(joystick); //gets joystick variables to be used
	  if(abs(joystick.joy1_y1) > threshold) //when the absolute value of the first joystick's y position is greater than the threshold defined above, the code will be run
	  {
	  	motor[motorA] = joystick.joy1_y1 / 1.6; //the motor's power is set to be equal to the y position of the joystick
	  }
	  else
	  {
	  	motor[motorA] = 0; //if the joystick's y position is not higher than the threshold, the motor is set to not move. this is necessary so the motor does not move indefinitely
	  }


	  if(abs(joystick.joy1_y2) > threshold) //same as above, for the right joystick
	  {
	  		motor[motorB] =  joystick.joy1_y2;
	  }
	  else
	  {
	  	motor[motorB] = 0;
	  }

	  getJoystickSettings(joystick); //not sure if necessary, recommended just in case
	  servoChangeRate[servo1] = 7; //essentially the speed of the servo. without this, it will default to 10. we wanted to set it lower so that our mechanism wasn't slamming into the ground to hard
  	if(joy1Btn(1)) //in the default controller configuration, this means that if the x button on the controller is pressed, the following code will run. this is the proper syntax for running any sort of code from the pressing of the x, y, a, and b buttons
  	{
  		 PlaySound(soundDownwardTones); //just plays a sound for testing purposes. we wanted to make sure that this code was running. then we just left it in once we got this code working because it sounded cool
  		 servo[servo1] = 255; //sets servo one (defined in the motors and sensors setup) to its maximum of 255. the max position is depended on the servo, but most standard servos will have 255 as max
  		 wait1Msec(500); //just a wait function to ensure that the code does not move on before the servo has finished its movement to the specified position. possibly unnecessary, but recommended
  	}


		if(joy1Btn(2)) //basically does the same as above, just sets it to a different value
 		{
 			if (ServoValue[servo1] > 180){
				servo[servo1] = 180;
				wait1Msec(500);
			}
		}
}
}
